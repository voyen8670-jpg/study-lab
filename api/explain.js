export default async function handler(req, res) {
  try {
    const { question } = req.body;

    if (!question || question.trim() === "") {
      return res.status(400).json({ answer: "‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi." });
    }

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini", // ‚úÖ D√πng model m·ªõi v√† nhanh h∆°n (ho·∫∑c gpt-3.5-turbo n·∫øu b·∫°n th√≠ch)
        temperature: 0.7,
        messages: [
          {
            role: "system",
            content:
              "B·∫°n l√† tr·ª£ l√Ω AI trong ph√≤ng th√≠ nghi·ªám ·∫£o. H√£y gi·∫£i th√≠ch c√°c th√≠ nghi·ªám v·∫≠t l√≠, ho√° h·ªçc v√† sinh h·ªçc m·ªôt c√°ch ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, th√¢n thi·ªán, ph√π h·ª£p h·ªçc sinh THPT.",
          },
          { role: "user", content: question },
        ],
      }),
    });

    const data = await response.json();
    console.log("üîç API response:", data); // Gi√∫p b·∫°n xem n·∫øu OpenAI tr·∫£ v·ªÅ l·ªói

    // ‚úÖ Ki·ªÉm tra v√† l·∫•y c√¢u tr·∫£ l·ªùi an to√†n
    const answer =
      data.choices?.[0]?.message?.content?.trim() ||
      "‚ùì M√¨nh ch∆∞a nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI. H√£y th·ª≠ l·∫°i nh√©.";

    res.status(200).json({ answer });
  } catch (error) {
    console.error("‚ùå L·ªói server:", error);
    res.status(500).json({
      answer: "‚ö†Ô∏è C√≥ l·ªói khi g·ªçi AI, h√£y th·ª≠ l·∫°i sau m·ªôt ch√∫t.",
    });
  }
}
